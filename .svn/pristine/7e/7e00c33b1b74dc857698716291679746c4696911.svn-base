//
//  ScanViewController.m
//  CardReader
//
//  Created by Raúl Horacio Valencia Tenorio on 7/13/11.
//  Copyright 2011 Mittra Software. All rights reserved.
//

#import "ScanViewController.h"
#import "ProjectConstants.h"
#import "PaymentViewController.h"
#import "FindItemParser.h"
#import "FindItemModel.h"
#import "CardReaderAppDelegate.h"
#import "Promotions.h"
#import "Styles.h"
#import "Tools.h"
@implementation ScanViewController

@synthesize textDescription;
@synthesize btnScan;
@synthesize btnPay;
//@synthesize barButtonLeft;
@synthesize barButtonRight;
@synthesize aTableView;
@synthesize tableData;
@synthesize txtSKUManual;
typedef enum {
	
	barButtonDisconnected = 0,
	barButtonConnected,
	barButtonScanning,
	barButtonCharge,
	barButtonUnknown

} barButtonImageLoad;

//----------------------------------------
//            MEMORY MANAGEMENT
//----------------------------------------
#pragma mark -
#pragma mark MEMORY MANAGEMENT

-(void)didReceiveMemoryWarning
{
	[super didReceiveMemoryWarning];
}

//----------------------------------------
//            VIEW LIFECYCLE
//----------------------------------------
#pragma mark -
#pragma mark VIEW LIFECYCLE

-(void)viewDidLoad
{
    [super viewDidLoad];
	txtSKUManual.inputAccessoryView=[Tools inputAccessoryView:txtSKUManual];

	NSString *aStr = [NSString stringWithFormat:@"%@ %@", tpvMovil, projectStr];
	[self setTitle:aStr];

	status = [[NSMutableString alloc] init];
	debug = [[NSMutableString alloc] init];
	
	selectedItemIndex=-1;
	
#if (TARGET_IPHONE_SIMULATOR || WITHOUT_CARDREAD)
	
	[btnScan setTitle:NSLocalizedString(@"Registro", @"Connect accessory to iPhone/iPod") 
			 forState:UIControlStateNormal];
	[btnPay setHidden:YES];

#else
	
	[btnScan setTitle:NSLocalizedString(@"Conectar el Dispositivo", @"Connect accessory to iPhone/iPod") 
			 forState:UIControlStateNormal];
	[btnScan setUserInteractionEnabled:NO];
	[btnPay setHidden:YES];
	
#endif
		
	[self setBarbuttonImage:barButtonDisconnected];
	//[self designTweaks];
	[Styles bgGradientColorPurple:self.view];
	
	[Styles silverButtonStyle:btnPay];
	[Styles silverButtonStyle:btnScan];
	
	/*
	///hardcode DELETE
	for (int x=0; x<10; x++) {
		
		FindItemModel *item=[[FindItemModel alloc] init];
		item.barCode=@"11111111";
		item.description=@"Item";
		item.price=@"50000";
					  [self setDataIntoArray:item];		
					  [item release];
	}
	[aTableView reloadData];*/
	[Tools validatePrinterConfig];
}

-(void)viewWillDisappear:(BOOL)animated
{
	DLog(@"viewwilldisappear scan");

	[scanDevice removeDelegate:self];
	[scanDevice disconnect];
	scanDevice = nil;
	[super viewWillDisappear:animated];
}
-(void)viewWillAppear:(BOOL)animated
{
	DLog(@"viewwillappear scan");
    [self.navigationController setNavigationBarHidden:NO animated:animated];

	/*if(selectedItemIndex>=0&&[productList count]>0){	
		FindItemModel *item=[productList objectAtIndex:selectedItemIndex];
		[self applyPromotionsToProducts:item];
	}	*/
	if([productList count]==0)
		[btnPay setHidden:YES];
	[aTableView reloadData];
	
	[self connectionState:scanDevice.connstate];
	scanDevice = [Linea sharedDevice];
    [scanDevice setDelegate:self];
	[scanDevice connect];
	[super viewWillAppear:animated];
}

-(void)viewDidUnload
{
	[scanDevice removeDelegate:self];
	[scanDevice disconnect];
	scanDevice = nil;
    [super viewDidUnload];
}

//----------------------------------------
//            INTERACE ORIENTATION
//----------------------------------------
#pragma mark -
#pragma mark INTERACE ORIENTATION

-(BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation
{
    return (UIInterfaceOrientationIsPortrait(interfaceOrientation));
}

//----------------------------------------
//            TABLE VIEW MANAGEMENT
//----------------------------------------
#pragma mark -
#pragma mark TABLE VIEW MANAGEMENT

-(UITableViewCell *)tableView:(UITableView *)tableView 
		cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
	UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"Cell"];
	
	if (cell == nil) 
	{
		cell = [[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle
									   reuseIdentifier:@"Cell"]autorelease];
	}else{//MPSA
        for (UIView* subview in [cell.contentView subviews]) {
           // if (subview.tag!=0) {
                [subview removeFromSuperview];
            //}
        }
    }
	//cell.textLabel.textColor=[UIColor whiteColor];
	//cell.textLabel.font = [UIFont fontWithName:@"Helvetica" size:14.0];
	//[cell.textLabel setText:[[tableData objectAtIndex:indexPath.row] objectForKey:@"Text"]];
	//[cell.detailTextLabel setText:[[tableData objectAtIndex:indexPath.row] objectForKey:@"DetailText"]];
	//[cell.imageView setImage:[[tableData objectAtIndex:indexPath.row] objectForKey:@"Image"]];
	
	UILabel *aLabelNumberRow = [[UILabel alloc] initWithFrame:
					   CGRectMake(cell.frame.size.width - 320, 
								  cell.frame.size.height - 44, 
								  40, 40)];
	[aLabelNumberRow setText:[NSString stringWithFormat:@"%i",indexPath.row+1]];
	[aLabelNumberRow setFont:[UIFont boldSystemFontOfSize:16]];
	//[aLabelNumberRow setFont:[UIFont boldSystemFontOfSize]];
	[aLabelNumberRow setTextColor:[UIColor whiteColor]]; 
	[aLabelNumberRow setBackgroundColor:[UIColor clearColor]];
	[aLabelNumberRow setAdjustsFontSizeToFitWidth:YES];
	[aLabelNumberRow setTextAlignment:UITextAlignmentCenter];
	[[cell contentView] addSubview:aLabelNumberRow];
	[aLabelNumberRow release];
	
	
	UILabel *aLabelName = [[UILabel alloc] initWithFrame:
					   CGRectMake(cell.frame.size.width - 280, 
								  cell.frame.size.height - 44, 
								  200, 22)];
	[aLabelName setText:[[tableData objectAtIndex:indexPath.row] objectForKey:@"Text"]];
	[aLabelName setFont:[UIFont boldSystemFontOfSize:16]];
	[aLabelName setBackgroundColor:[UIColor clearColor]];
	[aLabelName setTextColor:[UIColor whiteColor]]; 
	[aLabelName setAdjustsFontSizeToFitWidth:YES];
	[[cell contentView] addSubview:aLabelName];
	[aLabelName release];
	
	UILabel *aLabelDescription = [[UILabel alloc] initWithFrame:
					   CGRectMake(cell.frame.size.width - 280, 
								  cell.frame.size.height - 22, 
								  200, 22)];
	[aLabelDescription setText:[[tableData objectAtIndex:indexPath.row] objectForKey:@"DetailText"]];
	[aLabelDescription setBackgroundColor:[UIColor clearColor]];
	[aLabelDescription setTextColor:[UIColor whiteColor]]; 
	[aLabelDescription setAdjustsFontSizeToFitWidth:YES];
	[[cell contentView] addSubview:aLabelDescription];
	[aLabelDescription release];
	
	
	//----
	UILabel *aLabel = [[UILabel alloc] initWithFrame:
					   CGRectMake(cell.frame.size.width - 70, 
								  cell.frame.size.height - 50, 
								  70, 30)];
	[aLabel setText:[Tools amountCurrencyFormat:[[tableData objectAtIndex:indexPath.row] objectForKey:@"Price"]]];
	[aLabel setFont:[UIFont boldSystemFontOfSize:16]];
	[aLabel setBackgroundColor:[UIColor clearColor]];
	[aLabel setTextColor:[UIColor whiteColor]]; 
	[aLabel setAdjustsFontSizeToFitWidth:YES];
	[[cell contentView] addSubview:aLabel];
	[aLabel release];
	
	UILabel *aLabelDiscount = [[UILabel alloc] initWithFrame:
					   CGRectMake(cell.frame.size.width - 60, 
								  cell.frame.size.height - 30, 
								  70, 30)];
	[aLabelDiscount setText:[self displayPromotionDiscount:indexPath.row]];
	[aLabelDiscount setBackgroundColor:[UIColor clearColor]];
	[aLabelDiscount setTextColor:[UIColor whiteColor]]; 
	[aLabelDiscount setAdjustsFontSizeToFitWidth:YES];
	[[cell contentView] addSubview:aLabelDiscount];
	[aLabelDiscount release];
	
	return cell;
}
-(NSString*) displayPromotionDiscount:(int) index
{
	NSString *discountAmount=@"";
	FindItemModel *item=[productList objectAtIndex:index];
	if (item.promo&&[item.discounts count]>0) {
		Promotions *promo=[item.discounts objectAtIndex:0];
		
		if (promo.promoType==3) // % discount by key
		{	discountAmount=[NSString stringWithFormat:@"-%@",promo.promoValue]; 
			[Tools amountCurrencyFormat:discountAmount];
			return discountAmount;
		}else
			if(promo.promoType==4) // fixed amount by key discount
			{	discountAmount=[NSString stringWithFormat:@"-%@",promo.promoDiscountPercent]; 
				[Tools amountCurrencyFormat:discountAmount];
				return discountAmount;
			}else
				//return @"PLAZOS";
				return @"";
	}
	else 
		return @"";

}
-(NSInteger)tableView:(UITableView *)tableView 
numberOfRowsInSection:(NSInteger)section
{
	return [tableData count];
}

-(void)tableView:(UITableView *)tableView 
commitEditingStyle:(UITableViewCellEditingStyle)editingStyle 
forRowAtIndexPath:(NSIndexPath *)indexPath
{
	if (editingStyle == UITableViewCellEditingStyleDelete) {
		
		[productList removeObjectAtIndex:indexPath.row];
		[tableData removeObjectAtIndex:indexPath.row];
		
		[tableView deleteRowsAtIndexPaths:[NSArray arrayWithObject:indexPath]
						  withRowAnimation:UITableViewRowAnimationFade];
		//[self turnOffEditing];
		[tableView reloadData];
	}
	
	if ([tableView numberOfRowsInSection:indexPath.section] == 0) {
		
		[btnPay setHidden:YES];
		
	}
}

-(void)tableView:(UITableView *)tableView 
willBeginEditingRowAtIndexPath:(NSIndexPath *)indexPath
{
	//[self turnOnEditing];
}

-(BOOL)tableView:(UITableView *)tableView 
canEditRowAtIndexPath:(NSIndexPath *)indexPath
{
	return YES;
}

-(NSString *)tableView:(UITableView *)tableView
titleForDeleteConfirmationButtonForRowAtIndexPath:(NSIndexPath *)indexPath
{
	return NSLocalizedString(@"¿Borrar?", @"Erase confirmation");	
}

-(UITableViewCellEditingStyle)tableView:(UITableView *)tableView
		  editingStyleForRowAtIndexPath:(NSIndexPath *)indexPath
{
	return UITableViewCellEditingStyleDelete;
}
/*- (UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section
{
	UIView *header = [[[UIView alloc] initWithFrame:CGRectMake(0, 0, tableView.bounds.size.width, 22)] autorelease];
	[header setBackgroundColor:[UIColor grayColor]];
	return header;
	
}*/
-(UIView*) tableView:(UITableView *)tableView viewForFooterInSection:(NSInteger)section
{
	if (total != 0) {
		
		total = 0;
		
	}
	
	for (NSDictionary *aDic in tableData) {
		
		DLog(@"Title for footer:%@",aDic);
		DLog(@"Price:%i",total);
		total += [[aDic objectForKey:@"Price"] floatValue];
		
	}
	
	UILabel *lblTotal=[[UILabel alloc] initWithFrame:CGRectMake(0, 0, tableView.bounds.size.width, 22)];
	lblTotal.text=[Tools amountCurrencyFormat:[NSString stringWithFormat:@"%.02f",total]];
	lblTotal.text=[NSString stringWithFormat:@"SubTotal: %@",lblTotal.text];
	lblTotal.backgroundColor=[UIColor clearColor];
	lblTotal.textColor=[UIColor blackColor];
	
	UIView *footer = [[[UIView alloc] initWithFrame:CGRectMake(0, 0, tableView.bounds.size.width, 22)] autorelease];
	[footer setBackgroundColor:[UIColor whiteColor]];
	[footer addSubview:lblTotal];
	[lblTotal release];
	return footer;
	
}
/*-(NSString *)tableView:(UITableView *)tableView 
titleForFooterInSection:(NSInteger)section
{
	/*if (total != 0) {
		 
		total = 0;
		
	}
	
	for (NSDictionary *aDic in tableData) {
	
		DLog(@"Title for footer:%@",aDic);
		DLog(@"Price:%i",total);
		total += [[aDic objectForKey:@"Price"] intValue];
		
	}
	
	return [NSString stringWithFormat:@"Total: $%i",total];
}*/

-(void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
	if (selectedItemIndex==indexPath.row) {
		//detail item
		FindItemModel *item=[productList objectAtIndex:indexPath.row];
		[(CardReaderAppDelegate*)([UIApplication sharedApplication].delegate) detailItemScreen:item];

		NSIndexPath *indexP=[NSIndexPath indexPathWithIndex:selectedItemIndex];
		[tableView deselectRowAtIndexPath:indexP animated:YES];
		selectedItemIndex=-1;
	}
	selectedItemIndex=indexPath.row;
}

- (void)tableView:(UITableView *)tableView willDisplayCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath
{
	cell.selectionStyle = UITableViewCellSelectionStyleGray;
	cell.textLabel.backgroundColor = [UIColor clearColor];
	cell.textLabel.textColor = [UIColor whiteColor];
	UIView *bg = [[UIView alloc] initWithFrame:cell.frame];
	//bg.backgroundColor = UIColorFromRGBWithAlpha(0X66224F,1);
	bg.backgroundColor = UIColorFromRGBWithAlpha(0XC235A5,0.5);
	cell.backgroundView = bg;
	cell.backgroundColor = [UIColor clearColor];
	[bg release];
}
//----------------------------------------
//            SCAN DEVICE HANDLER
//----------------------------------------
#pragma mark -
#pragma mark SCAN DEVICE HANDLER

-(void)buttonPressed:(int)whichButton
{
	[self setBarbuttonImage:barButtonScanning];
}

-(void)buttonReleased:(int)which
{
	[self setBarbuttonImage:barButtonConnected];
}

-(void)connectionState:(int)state
{
	switch (state) {

		case CONN_DISCONNECTED:
		
		case CONN_CONNECTING:
			
			[self setBarbuttonImage:barButtonDisconnected];
			break;
		
		case CONN_CONNECTED:
			
			[self setBarbuttonImage:barButtonConnected];
			
			NS_DURING {

				[scanDevice msStartScan];
				[scanDevice setBarcodeTypeMode:BARCODE_TYPE_EXTENDED];
				[self enableCharging];
				
				[btnScan setTitle:NSLocalizedString(@"Registro", @"Scan with accessory to iPhone/iPod") 
						 forState:UIControlStateNormal];
				[btnScan setUserInteractionEnabled:YES];
				
			} NS_HANDLER {
				
				DLog(@"%@", [localException name]);
				DLog(@"%@", [localException reason]);
			
			} NS_ENDHANDLER
			
			[self updateBattery];
			break;
	}
}

-(void)enableCharging
{
	NS_DURING {
		
		[scanDevice setCharging:YES];
    
	} NS_HANDLER {
		
	} NS_ENDHANDLER
}

-(void)updateBattery
{
    NS_DURING {
		
		int percent = [scanDevice getBatteryCapacity];
		
		if (percent < 5) {
			
			[barButtonRight setImage:[UIImage imageWithContentsOfFile: [[NSBundle mainBundle] pathForResource:@"Battery0" ofType:@"png"]]];
			
		} else if (percent < 10) {
			
			[barButtonRight setImage:[UIImage imageWithContentsOfFile: [[NSBundle mainBundle] pathForResource:@"Battery10" ofType:@"png"]]];
			
		} else if(percent < 40) {
			
			[barButtonRight setImage:[UIImage imageWithContentsOfFile: [[NSBundle mainBundle] pathForResource:@"Battery40" ofType:@"png"]]];
		
		} else if(percent < 60) {
		
			[barButtonRight setImage:[UIImage imageWithContentsOfFile: [[NSBundle mainBundle] pathForResource:@"Battery60" ofType:@"png"]]];
			
		} else if(percent < 80) {
	
			[barButtonRight setImage:[UIImage imageWithContentsOfFile: [[NSBundle mainBundle] pathForResource:@"Battery80" ofType:@"png"]]];
		
		} else {
		
			[barButtonRight setImage:[UIImage imageWithContentsOfFile: [[NSBundle mainBundle] pathForResource:@"Battery100" ofType:@"png"]]];
			
		}
		
    } NS_HANDLER {

		[barButtonRight setImage:[UIImage imageWithContentsOfFile: [[NSBundle mainBundle] pathForResource:@"Disconnected" ofType:@"png"]]];
		
    } NS_ENDHANDLER
}

//----------------------------------------
//            BARCODE ANALYSIS
//----------------------------------------
#pragma mark -
#pragma mark BARCODE ANALYSIS

-(void)barcodeData:(NSString *)barcode 
			  type:(int)type 
{	
//	self.lastBarcode=barcode;
//	self.lastBarcodeType=[linea barcodeType2Text:type];
	
	[status setString:@""];
	[status appendFormat:@"Type: %d\n",type];
	[status appendFormat:@"Type text: %@\n",[scanDevice barcodeType2Text:type]];
	[status appendFormat:@"Barcode: %@",barcode];
	DLog(@"%@", status);
	
	[self startRequest:barcode];
	//[self setDataIntoArray:barcode];

	NS_DURING {
		
		[self updateBattery];
	
	} NS_HANDLER {
		
		DLog(@"%@", [localException name]);
		DLog(@"%@", [localException reason]);
		
	} NS_ENDHANDLER
}

//----------------------------------------
//            MAGNETIC CARD DATA
//----------------------------------------
#pragma mark -
#pragma mark MAGNETIC CARD DATA

-(void)magneticCardData:(NSString *)track1 
				 track2:(NSString *)track2 
				 track3:(NSString *)track3
{
	[status setString:@""];
	
//	financialCard card;
//	
//	if([scanDevice msProcessFinancialCard:&card 
//								   track1:track1 
//								   track2:track2]) {
//		
//		lastCardName=[card.cardholderName copy];
//		lastCardNumber=[card.accountNumber copy];
//		if(card.exirationYear!=0)
//			lastExpDate=[[NSString stringWithFormat:@"%d/%d\n",card.exirationMonth,card.exirationYear] retain];
//		
//		
//		if(card.cardholderName!=NULL)
//			[status appendFormat:@"Name: %@\n",card.cardholderName];
//		if(card.accountNumber!=NULL)
//			[status appendFormat:@"Number: %@\n",card.accountNumber];
//		if(card.exirationYear!=0)
//			[status appendFormat:@"Expiration: %d/%d\n",card.exirationMonth,card.exirationYear];
//		[status appendString:@"\n"];
//	}
	
	if(track1 != nil) {
	
		[status appendFormat:@"Track1: %@\n",track1];
		
	}
	
	if(track2 != nil) {
		
		[status appendFormat:@"Track2: %@\n",track2];
		
	}
	
	if(track3 != nil) {
		
		[status appendFormat:@"Track3: %@\n",track3];
		
	}
	
	DLog(@"%@",status);
	
	int sound[] = {2730,150,0,30,2730,150};
	[scanDevice playSound:100 
				 beepData:sound 
				   length:sizeof(sound)];
	[self updateBattery];
}

//----------------------------------------
//            DESIGN TWEAKS
//----------------------------------------
#pragma mark -
#pragma mark DESIGN TWEAKS
/*
-(void)designTweaks
{
}
*/
//----------------------------------------
//            ACTIONS
//----------------------------------------
#pragma mark -
#pragma mark ACTIONS

-(IBAction)startScanBarCode:(id)sender
{
	
#ifdef TARGET_IPHONE_SIMULATOR || WITHOUT_CARDREAD
	
	
#else
	
	[self setBarbuttonImage:barButtonScanning];
	
	NS_DURING {
		
		[textDescription setText:@""];
		[[NSRunLoop currentRunLoop] runUntilDate:[NSDate dateWithTimeIntervalSinceNow:0.01]];
		[scanDevice startScan];
		
	} NS_HANDLER {
		
		DLog(@"%@", [localException name]);
		DLog(@"%@", [localException reason]);
		
	} NS_ENDHANDLER
	
#endif
}

-(IBAction)stopScanBarCode:(id)sender
{
/*#ifdef TARGET_IPHONE_SIMULATOR || WITHOUT_CARDREAD
	
	//[self startRequest:@"82720821"]; // harcode Test codebar
	//[self setDataIntoArray:@"Scan"];
	
#else*/
	NSString *skuManual=txtSKUManual.text;
	if ([skuManual length]==0) {
		[Tools displayAlert:@"Aviso" message:@"Favor de introducir un SKU valido"];
		return;
	}
	[self startRequest:skuManual];
	[self.view endEditing:YES];
	[self setBarbuttonImage:barButtonConnected];
	NS_DURING { 
		
		[scanDevice stopScan];
		
	} NS_HANDLER {
		
		DLog(@"%@", [localException name]);
		DLog(@"%@", [localException reason]);
		
	} NS_ENDHANDLER
	
//#endif
}

-(IBAction)payItems:(id)sender
{
	/*DLog(@"Pay items");
	PaymentViewController *pay = [[PaymentViewController alloc] init];
	pay.scanView=self;
	[self presentModalViewController:pay
							animated:YES];
	[pay release];

	DLog(@"payment retain:%i",[pay retainCount]);
	[pay setProductList:productList];
	[pay changeTotalValue:total];*/
	[(CardReaderAppDelegate*)([UIApplication sharedApplication].delegate) itemPromotionScreen:productList];

}
-(void) removeProductsFromList
{
	[tableData removeAllObjects];
	[productList removeAllObjects];
	[self viewWillDisappear:NO];

}
-(IBAction) logout
{
	DLog(@"scanview logout");
	[(CardReaderAppDelegate*)([UIApplication sharedApplication].delegate) loginScreen];
}
//----------------------------------------
//            MISC METHODS
//----------------------------------------
#pragma mark -
#pragma mark MISC METHODS

/*-(void)displayAlert:(NSString *)title 
			message:(NSString *)message
{
	UIAlertView *alert = [[UIAlertView alloc] initWithTitle:title 
													message:message 
												   delegate:nil 
										  cancelButtonTitle:@"Aceptar" 
										  otherButtonTitles:nil];
	[alert show];
	[alert release];
}
*/
-(void)setBarbuttonImage:(int)imageToLoad
{
	UIImage *image = nil;
	
	switch (imageToLoad) {
		case barButtonConnected: {
			
			image = [UIImage imageWithContentsOfFile: [[NSBundle mainBundle] pathForResource:@"Connected" ofType:@"png"]];
			break;
		
		} case barButtonScanning: {
			
			image = [UIImage imageWithContentsOfFile: [[NSBundle mainBundle] pathForResource:@"Scaning" ofType:@"png"]];
			
			break;

		} case barButtonCharge: {
			
			[self updateBattery];
			break;
			
		} case barButtonDisconnected: {
			
			image = [UIImage imageWithContentsOfFile: [[NSBundle mainBundle] pathForResource:@"Disconnected" ofType:@"png"]];
			break; 
			
		} default: {
			
			image = [UIImage imageWithContentsOfFile: [[NSBundle mainBundle] pathForResource:@"Disconnected" ofType:@"png"]];
			break; 
			
		}
	}
	
	UIImageView *imgView = [[UIImageView alloc] initWithImage:image];
	[barButtonRight setCustomView:imgView];
	[imgView release];
}
/*
-(void)turnOnEditing
{
	if (barButtonLeft == nil) {

		barButtonLeft = [[UIBarButtonItem alloc] 
						 initWithTitle:NSLocalizedString(@"Terminar", @"Done left bar button")
						 style:UIBarButtonItemStyleBordered
						 target:self 
						 action:@selector(turnOffEditing)];
		
	} else {
		
		[barButtonLeft setStyle:(UIBarButtonItemStyle)UIBarButtonSystemItemDone];
		[barButtonLeft setTarget:self];
		[barButtonLeft setAction:@selector(turnOffEditing)];
		[barButtonLeft setTitle:NSLocalizedString(@"Terminar", @"Done left bar button")];
		
	}
	
	self.navigationItem.leftBarButtonItem = barButtonLeft;
	[aTableView setEditing:YES
				  animated:YES];
}

-(void)turnOffEditing
{
	if (barButtonLeft == nil) {
		
		barButtonLeft = [[UIBarButtonItem alloc] 
						 initWithTitle:NSLocalizedString(@"Editar", @"Edit left bar button")
						 style:UIBarButtonItemStyleBordered
						 target:self 
						 action:@selector(turnOnEditing)];
		
	} else {
		
		[barButtonLeft setStyle:(UIBarButtonItemStyle)UIBarButtonSystemItemEdit];
		[barButtonLeft setTarget:self];
		[barButtonLeft setAction:@selector(turnOnEditing)];
		[barButtonLeft setTitle:NSLocalizedString(@"Editar", @"Edit left bar button")];
		
	}
	
	self.navigationItem.leftBarButtonItem = barButtonLeft;
	[aTableView setEditing:NO 
				  animated:YES];
}
*/
-(void)totalAddition:(id)object
{
	if ([object respondsToSelector:@selector(length)]) {
		
		NSString *aStr = (NSString *)object;
		total += [aStr intValue];
		
	}
}
/*
-(void)setDataIntoArray:(NSString *)barCode
{
	
	if (tableData == nil) {
		
		tableData = [[NSMutableArray alloc] init];
		
	}
	
	//int i = arc4random_uniform(11); //marca error en 4.2
	
	int i = arc4random() % 11;  //reemplazo

	
	if (i < 0) {
		
		i *= -1;
		
	}
	
	NSString *aStr = [NSString stringWithFormat:@"%i", i];
	
	NSString *path = [[NSBundle mainBundle] pathForResource:@"Products" 
													 ofType:@"plist"];
	NSArray *allProducts = [[NSDictionary dictionaryWithContentsOfFile:path] objectForKey:@"Products"];
	NSString *name = [allProducts objectAtIndex:i];
	
	//i = arc4random_uniform(11);//marca error en 4.2
	 i = arc4random() % 11;  //reemplazo

	if (i < 0) {
		
		i *= -1;
		
	}
	
	aStr = [NSString stringWithFormat:@"%i", i];
	
	path = [[NSBundle mainBundle] pathForResource:@"Images"
										   ofType:@"plist"];
	allProducts = [[NSDictionary dictionaryWithContentsOfFile:path] objectForKey:@"Products"];
	NSString *imageName = [allProducts objectAtIndex:i];
	
	//i = arc4random_uniform(5000);
	i = arc4random()%5000;

	aStr = [NSString stringWithFormat:@"%i", i];
	
	NSDictionary *aDic = [[NSDictionary alloc] initWithObjectsAndKeys:
						  name, @"Text",
						  barCode, @"DetailText",
						  [UIImage imageNamed:imageName], @"Image", 
						  aStr, @"Price",nil];
	
	[tableData addObject:aDic];
	[aTableView reloadData];
	
	if ([tableData count] >= 1) {
		
		[self turnOffEditing];
		[btnPay setHidden:NO];
		
	}
}*/
-(void)setDataIntoArray:(FindItemModel *)itemObject
{
	
	if (tableData == nil) {
		
		tableData = [[NSMutableArray alloc] init];
		
	}
	int i = arc4random() % 11;  //reemplazo
	
	if (i < 0) {
		
		i *= -1;
		
	}
	
	
	NSString* path = [[NSBundle mainBundle] pathForResource:@"Images"
										   ofType:@"plist"];
	NSArray* allProducts = [[NSDictionary dictionaryWithContentsOfFile:path] objectForKey:@"Products"];
	NSString *imageName = [allProducts objectAtIndex:i];
	
	NSDictionary *aDic = [[NSDictionary alloc] initWithObjectsAndKeys:
						  itemObject.description, @"Text",
						  itemObject.barCode, @"DetailText",
						  [UIImage imageNamed:imageName], @"Image", 
						  itemObject.price, @"Price",nil];
	
	[tableData addObject:aDic];
	[aDic release];
	[aTableView reloadData];
	
	if ([tableData count] >= 1) {
		
		//[self turnOffEditing];
		[btnPay setHidden:NO];
		
	}
}


//----------------------------------------
//            REQUEST HANDLERS
//----------------------------------------
#pragma mark -
#pragma mark REQUEST HANDLERS
-(void) startRequest:(NSString*) barCode
{
	//*** find item request code ***/
	LiverPoolRequest *liverPoolRequest=[[LiverPoolRequest alloc] init];
	liverPoolRequest.delegate=self;
	NSArray *pars=[NSArray arrayWithObjects:barCode,nil];
	[liverPoolRequest sendRequest:@"buscaProducto" forParameters:pars forRequestType:findRequest]; //cambiar a localized string
	[liverPoolRequest release];
}
-(void) performResults:(NSData *)receivedData :(RequestType) requestType
{
	[self findItemRequestParsing:receivedData];
}

-(void) findItemRequestParsing:(NSData*) data
{
	FindItemParser *findParser=[[FindItemParser alloc] init];
	DLog(@"antes de empezar");
	[findParser startParser:data];
	DLog(@"termino");
	FindItemModel *findItemModel=findParser.findItemModel;
	if ([findItemModel.description isEqualToString:@"No encontrado"] ) {
		[Tools displayAlert:@"Error" message:@"Articulo no encontrado"];
	}else {
		[self setDataIntoArray:findItemModel];
		
		if (productList == nil) {
			productList = [[NSMutableArray alloc] init];
		}
		[productList addObject:findItemModel];
		[self applyPromotionsToProducts:findItemModel];
		[self isSKUSameSection:findItemModel];
		
	}
	
	[findParser release];
	
}

-(void) dealloc
{
	[txtSKUManual release],txtSKUManual=nil;
	[textDescription release], textDescription=nil;
	[btnScan release], btnScan=nil;
	[btnPay release], btnPay=nil;
	//[barButtonLeft release],barButtonLeft=nil;
	[barButtonRight release],barButtonRight=nil;
	[aTableView release],aTableView=nil;
	[tableData release], tableData=nil;
	[super dealloc];
}
-(void) isSKUSameSection:(FindItemModel*) aItemWithPromo
{
	NSMutableArray *productListCopy=[[[NSMutableArray alloc] initWithArray:productList] autorelease];
	
	//NSMutableArray *productListCopy = [[NSMutableArray alloc] initWithArray:productList copyItems:YES];
	BOOL different=NO;
		for (FindItemModel *item in productListCopy) {
			if (![aItemWithPromo.department isEqualToString:[item department]]) {
				DLog(@"secciones diferentes!");
				different=YES;	
			}
		}
	if (different) 
		[Tools displayAlert:@"Aviso" message:@"El SKU ingresado es de una diferente seccion favor de separar los SKUS por seccion para realizar la venta"];
	
}
-(void) applyPromotionsToProducts:(FindItemModel*) aItemWithPromo
{
	DLog(@"applyPromotionsToProducts");
/*
	NSMutableArray *productListCopy=[[[NSMutableArray alloc] initWithArray:productList] autorelease];
	
	//NSMutableArray *productListCopy = [[NSMutableArray alloc] initWithArray:productList copyItems:YES];
	
		if (aItemWithPromo.promo&&[productListCopy count]>0) 
			for (FindItemModel *item in productListCopy) {
				if ([aItemWithPromo.department isEqualToString:[item department]]) {
					[productList replaceObjectAtIndex:[productList indexOfObject:item] withObject:aItemWithPromo];
					DLog(@"se reemplazo promo item!");
				}
			}
	
		else 
			for (FindItemModel *item in productListCopy) {
				if ([aItemWithPromo.department isEqualToString:[item department]]) {
					[productList replaceObjectAtIndex:[productList indexOfObject:aItemWithPromo] withObject:item];
					DLog(@"se reemplazo promo item Nuevo!");
					return;
				}
			}
	*/
}


//----------------------------------------
//            TEXTFIEL DELEGATE
//----------------------------------------

-(void) textFieldDidBeginEditing:(UITextField *)textField
{
	[UIView beginAnimations:nil context:NULL];
    [UIView setAnimationDuration:0.3]; 
	
	CGPoint textFieldCord=textField.center;
	
	CGRect viewCords=self.view.frame;
	
	viewCords.origin.y=viewCords.origin.y-textFieldCord.y+140;
	
	self.view.frame=viewCords;
    [UIView commitAnimations];
	
}
-(void) textFieldDidEndEditing:(UITextField *)textField
{
	[UIView beginAnimations:nil context:NULL];
    [UIView setAnimationDuration:0.3]; 
	
	CGPoint textFieldCord=textField.center;
	
	CGRect viewCords=self.view.frame;
	
	viewCords.origin.y=viewCords.origin.y+textFieldCord.y-140;
	
	self.view.frame=viewCords;
    [UIView commitAnimations];
}

-(void) touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event
{
	[self.view endEditing:YES];
	
}
@end

