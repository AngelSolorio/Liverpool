//
//  PaymentParser.m
//  CardReader
//
//  Created by Gonet on 15/08/11.
//  Copyright 2011 Mittra Software. All rights reserved.
//

#import "PaymentParser.h"


@implementation PaymentParser
@synthesize msgResponse,currentElement;
@synthesize payment;
@synthesize productList;
@synthesize itemModel;
@synthesize promo;

#define RETURN				@"return"
#define ISERROR				@"isError"
#define MESSAGE				@"message"
#define DOCTO				@"docto"
#define	INSTALLMENT_AMOUNT	@"installmentsAmount"
#define BANK				@"bank"
#define BALANCE_TO_PAY		@"balanceToPay"
#define CODIGO_AUTHORIZACION @"authorizationCode"

#define PRODUCTOS			@"productos"
#define IDPRODUCTO			@"idProducto"
#define CATEGORIA			@"categoria"
#define DESCRIPCION			@"descripcion"
#define PRECIO				@"precio"
#define LINETYPE			@"lineType"
#define PROMO				@"promo"

#define PROMOCION			@"promocion"
#define PROMODESCRIPCION	@"promoDescripcion"
#define PLANID				@"planId"
#define PLAZO				@"plazo"
#define PORCENTAJE			@"porcentaje"
#define TIPO				@"tipo"

-(void) startParser:(NSData*) data
{
	//currentElement=[[NSString alloc] init];
	msgResponse=[[NSString alloc] init];
	payment=[[PaymentResponse alloc] init];
	[payment setMessage:[[NSString alloc] init]];
	[payment setIsError:true];
	
	productList=[[NSMutableArray alloc]init];

	
	NSXMLParser *parser = [[NSXMLParser alloc] initWithData:data];
	
    [parser setDelegate:self]; // The parser calls methods in this class
    [parser setShouldProcessNamespaces:NO]; 
    [parser setShouldReportNamespacePrefixes:NO]; //
    [parser setShouldResolveExternalEntities:NO]; 
	
    [parser parse]; // Parse that data..
	/*
	NSError *err;
    if (err && [parser parserError]) {
        err = [parser parserError];
    }*/
	
	
	
	
    [parser release];
}

-(void) parserDidStartDocument:(NSXMLParser *)parser
{
}
-(void) parserDidEndDocument:(NSXMLParser *)parser
{
	NSLog(@"Finalizo parser");
	DLog(@"productlist %i ,%@",[productList count],productList );
	for (FindItemModel *item in productList) {
		DLog(@"itemmodel ,%@",item.description );
		for (Promotions *promos in item.discounts) {
			DLog(@"promos in itemmodel %i ,%@", [item.discounts count],promos.promoDescription );
			DLog(@"promos in itemmodel %@", promos.promoBaseAmount );
			DLog(@"promos in itemmodel %@", promos.promoDiscountPercent );
			DLog(@"promos in itemmodel %@", promos.promoTypeBenefit );

		}
	}
}
- (void)parser:(NSXMLParser *)parser didStartElement:(NSString *)elementName namespaceURI:(NSString *)namespaceURI qualifiedName:(NSString *)qName attributes:(NSDictionary *)attributeDict
{
	currentElement=elementName;
	
	if ([currentElement isEqualToString:PRODUCTOS]) {
		itemModel =[[FindItemModel alloc]init];
		[productList addObject:itemModel];
		[itemModel release];
		DLog(@"currentelement payparser producto: %@",currentElement);
		
	}
	else if ([currentElement isEqualToString:PROMOCION]) {
		promo=[[Promotions alloc]init];
		[self.itemModel.discounts addObject:promo];
		[promo release];
		DLog(@"currentelement payparser promocion: %@",currentElement);

	}
	
}
- (void)parser:(NSXMLParser *)parser didEndElement:(NSString *)elementName namespaceURI:(NSString *)namespaceURI qualifiedName:(NSString *)qName
{}
- (void)parser:(NSXMLParser *)parser foundCharacters:(NSString *)string
{
	if (!string) {
		string=@"";
	}
	if ([currentElement isEqualToString:RETURN]) {
		msgResponse=[msgResponse stringByAppendingString:string];
	}else if ([currentElement isEqualToString:ISERROR]) {
		if([string isEqualToString:@"false"]){
			[payment setIsError:false];
		}else {
			[payment setIsError:true];
			
			
		}

		
	}else if ([currentElement isEqualToString:MESSAGE]) {
		[payment setMessage:[payment.message stringByAppendingString:string]];

	}else if ([currentElement isEqualToString:DOCTO]) {
		[payment setDocto:string];
	}
	else if ([currentElement isEqualToString:INSTALLMENT_AMOUNT]) {
		[payment setMonthlyInterest:string];
	}
	else if ([currentElement isEqualToString:BANK]) {
		[payment setBank:string];
	}
	else if ([currentElement isEqualToString:BALANCE_TO_PAY]) {
		[payment setBalanceToPay:string];
	}
	else if ([currentElement isEqualToString:CODIGO_AUTHORIZACION]) {
		[payment setAuthorizationCode:string];
	}
	///******************product**************************************
	else if ([currentElement isEqualToString:IDPRODUCTO]) {
		[itemModel setBarCode:string];
	}
	else if ([currentElement isEqualToString:CATEGORIA]) {
		[itemModel setDepartment:string];
	}
	else if ([currentElement isEqualToString:DESCRIPCION]) {
		[itemModel setDescription:string];
	}
	else if ([currentElement isEqualToString:PRECIO]) {
		[itemModel setPrice:string];
	}
	else if ([currentElement isEqualToString:LINETYPE]) {
		[itemModel setLineType:string];
	}
	else if ([currentElement isEqualToString:PROMO]) {
		[itemModel setPromo:([string isEqualToString:@"true"] ? YES : NO)];
	}
	//----------------promo------------------------------------
	else if ([currentElement isEqualToString:PROMODESCRIPCION]) {
		[promo setPromoDescription:string];
	}
	else if ([currentElement isEqualToString:PLANID]) {
		[promo setPlanId:string];
	}
	else if ([currentElement isEqualToString:PLAZO]) {
		[promo setPromoInstallmentSelected:string];
	}
	else if ([currentElement isEqualToString:PORCENTAJE]) {
		[promo setPromoDiscountPercent:string];
	}
	else if ([currentElement isEqualToString:TIPO]) {
		[promo setPromoTypeBenefit:string];
		[self assignPromoType:string];
	}
	
}

-(void) assignPromoType:(NSString*)promoTypeBenefit {
	if ([promoTypeBenefit isEqualToString:@"FactorLoyaltyBenefit"]) {
		[promo setPromoType:1];
	}
	if ([promoTypeBenefit isEqualToString:@"descuentoTeclaPorcentaje"]||[promoTypeBenefit isEqualToString:@"PercentageDiscount"]) {
		[promo setPromoType:3];
	}
	else if ([promoTypeBenefit isEqualToString:@"descuentoTeclaMonto"]) {
		[promo setPromoType:4];
	}
}
-(NSString*) getMessageResponse{
	return [payment message];
}
-(BOOL) getStateOfMessage{
	DLog(@"payparserMesagge %@", payment.message);
	if(![payment isError])
		return YES;
	else 
		return NO;
}
-(NSMutableArray*) returnSaleProductList
{
	
	return productList;
}
-(void)dealloc
{	
	//[promo release];
	//[productList release];
	//[itemModel release];
	[payment release],payment=nil;
	//[msgResponse release];
	//[currentElement release];
	[super dealloc];
}
@end
